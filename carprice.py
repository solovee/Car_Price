# -*- coding: utf-8 -*-
"""CarPrice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BKWmwWEvdCyQJsY8g96UMacM5w0SqTMK
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("asinow/car-price-dataset")

print("Path to dataset files:", path)

from google.colab import files
files.upload()

!kaggle datasets download -d asinow/car-price-dataset

!unzip car-price-dataset.zip

import pandas as pd
import tensorflow as tf
import numpy as np

df = pd.read_csv('car_price_dataset.csv')
df.head()

df.columns

df.shape

df_encoded = pd.get_dummies(df, columns=['Brand', 'Model', 'Fuel_Type', 'Transmission'])
df_encoded.head()

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

colunas_norm = ['Year', 'Engine_Size', 'Mileage', 'Doors', 'Owner_Count']
df_encoded[colunas_norm] = scaler.fit_transform(df_encoded[colunas_norm])
df_encoded.head()

X_base = df_encoded.drop(['Price'], axis=1)
Y_base = df_encoded['Price']

df.isnull().sum()

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_base, Y_base, test_size=0.2, random_state=42)

X_test

modelo1 = tf.keras.Sequential([
    tf.keras.layers.Dense(100, activation='relu'),
    tf.keras.layers.Dense(100, activation='relu'),
    tf.keras.layers.Dense(10, activation='relu'),
    tf.keras.layers.Dense(1)
])

modelo1.compile(optimizer='Adam', loss= tf.keras.losses.MeanSquaredError(), metrics=['mae'])

modelo1.fit(X_base, Y_base, epochs=100)

modelo1.evaluate(X_test, y_test, verbose=0)

arr = modelo1.predict(X_test)
arr[2], y_test.iloc[2]

import matplotlib.pyplot as plt

def plot_random_predictions_vs_real(X_test, y_test, modelo1):
    if len(X_test) < 5:
        print("Não há amostras suficientes para selecionar aleatoriamente 5.")
        return

    random_samples = X_test.sample(n=5)
    random_indices = random_samples.index

    X_sample = X_test.loc[random_indices]
    y_real = y_test.loc[random_indices]
    y_pred = modelo1.predict(X_sample)

    plt.figure(figsize=(10, 5))
    plt.scatter(random_indices, y_real, color='blue', label='Valores Reais', s=100)
    plt.scatter(random_indices, y_pred, color='red', label='Previsões', alpha=0.7, s=100)

    plt.xlabel('Índice da amostra')
    plt.ylabel('Valores')
    plt.title('Previsões vs Valores Reais para 5 carros Aleatórios')
    plt.legend()
    plt.grid(True)

    plt.show()

plot_random_predictions_vs_real(X_test, y_test, modelo1)

np.unique(df['Model'])